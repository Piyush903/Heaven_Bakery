package com.bakery.controller;

import java.util.Random;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.bakery.entities.User;
import com.bakery.repository.UserRepository;
import com.bakery.service.EmailService;

@Controller
public class ForgotController {

	// We declare random at class level instead in a particular handler... 
	Random random = new Random(10000); 
		
	// Injecting EmailService here via @Autowired	
	@Autowired
	private EmailService emailService;
	
	// Injecting UserRepository here via @Autowired	
	@Autowired
	private UserRepository userRepository;
	
	// Injecting BCryptPasswordEncoder here via @Autowired
	@Autowired
	private BCryptPasswordEncoder bcrypt;
	
	// Handler for opening email id form
	
	@RequestMapping("/forgot")
	public String openEmailForm() {		
		System.out.println("Checking");
		return "forgot_email_form";		
	}
	
	// Handler for processing send-otp of email id form
	
	@PostMapping("/send-otp")
	public String sendOTP(@RequestParam("email") String email, HttpSession session) {
		
		// @RequestParam fetching email from form and storing it in email variable... 
		
		// To check whether email is comming or not...
		System.out.println("Email :- "+email);
		
		// Generating OTP...
		
		// random is declared at top in class... 
		int otp = random.nextInt(999999);
		
		// To check the OTP generated
		System.out.println("OTP :- "+otp);
		
		
		// Code for sending OTP to Email
		
		// Using emailService 
		// Here we need not to create emailRequest entity as we already have required data needed...
		// Preparing the arguments to be passed...
		String subject = "One-Time Password (OTP) for Password Reset Request on Our Platform";
		String message = 
				"<div style='border:5px solid #e2e2e2; padding:20px; background:#63ffb7; font-weight:bolder'>"
				+"<b><h3> Dear User, </h3></b>"
				+"<b><h3> We have received a request to reset your password for your account on our platform. To verify your identity and ensure the security of your account, please use the following One-Time Password (OTP) to proceed with the password reset process: </h3></b>"
				+"<b><h3>" + otp + "</h3></b>"
				+"<b><h3> Please enter this OTP on the password reset page within the next [time limit] minutes. After entering the OTP, you will be prompted to create a new password for your account. </h3></b>"
				+"<b><h3> If you did not initiate this request or believe this to be an unauthorized attempt, please contact our support team immediately. </b></h3>"
				+"<b><h3> Thank you for choosing our platform. </b></h3>" 
				+"<b><h3> Best regards, </b></h3>" 
				+"<b><h3> MedWeb </b></h3>"
				+"</div>";
		String to = email;
		  
		boolean flag = this.emailService.sendEmail(subject, message, to);
		
		// Now, the email containing otp is sent to email of that user and now we will be
		// verifying that otp from user as the user now will enter the otp... 	

		if(flag) {
		
			// When the otp is sent successfully to mail...
			
			// Saving the otp and email in our session attribute so that it could be used in further **"verification"** ...
			// Until the session is valid, we can fetch the otp and email from our session attribute ...
			
			session.setAttribute("myotp", otp);
			session.setAttribute("email", email);
			
			
			return "verify_otp";
		
		} else {
			
			// When the otp is not sent successfully to mail then sending back to forget email form ...
			
			session.setAttribute("message", "Check Your Email ID !!");
			
			return "forgot_email_form";
			
		}
		
		
	}
	
	// Handler for processing details comming from verify_otp view 
	
	@PostMapping("/verify-otp")
	public String verifyOtp(@RequestParam("otp") int otp, HttpSession session) {
		
		// @RequestParam used to fetch otp field data and store it in int otp variable... 
		// HttpSession used to retrieve the otp and email generated by system so as to verify... 
		
		// Getting data from session via attribute...
		
		
		// Typecasting myotp object to int  
		int myOtp = (int)session.getAttribute("myotp");
		
		// Similarly typecasting of email takes place here...
		String email = (String)session.getAttribute("email");
		
		// Validating...
		
		if(myOtp==otp) {
		
			// Returning Password Change Form...
			
			// Fetching user via userRepository through getUserByUserName
			User user = this.userRepository.findUserByEmail(email).get();
			
			if(user==null) {
			
				// Sending error message...
			
				session.setAttribute("message", "User does not exists with this email id !!");
				
				// To check this enter random email and see the otp from console as for now...
				 
				return "forgot_email_form";
				
			}
			else {
				
				// Sending change password form...
				
			}
			
			
			return "password_change_form";

		} else {
			
			// Returning back to verify_otp page along with message for the user...
			
			session.setAttribute("message", "You have entered wrong otp!!");
			return "verify_otp";
			
		}		
		
	}
	
	// Handler for changing the password from password_change_form view
	
	@PostMapping("/change-password")
	public String changePassword(@RequestParam("newpassword") String newpassword, HttpSession session) {
		
		// @RequestParam used to fetch newpassword field data and store it in String newpassword variable... 
		// Used HttpSession to retrieve email id of user so as to change the existing password...
		
		// Fetching User via email via session...
		// Also, typecasting our object from session to string...
		String email = (String) session.getAttribute("email"); 
		User user = this.userRepository.findUserByEmail(email).get(); 
		
		// Changing password of user...
		// Also we need to inject BCryptPasswordEncoder in our class to encode our new password...
		user.setPassword(this.bcrypt.encode(newpassword));
		
		// Then finally saving our user details (specifically talkin of password) ... 
		this.userRepository.save(user);
		
		// Now redirecting the to login page...
		
		return "redirect:/login?change=password changed successfully...";
		
		// Observe new way of redirecting with ? which means returning param with our custom message... 
		// Note that this will trigger the div setted in login.html page where we will see the changes associated with it respectively...
		
	}
	
	
}

